@{
    ViewData["Title"] = "Index";
}

<style>
    .container-opciones-grid {
    }
    .container-opciones{
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: var(--Margin);
    }
    .opcion {
        border: 1px solid #CED4DA;
        border-radius: var(--BorderRadius);
        transition: .3s all;
    }
    .opcion:hover {
        cursor: pointer;
        background-color: #ced4da;
    }
   .opcion .opcion-head {
         display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }
    .opcion .opcion-body{
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }
    .opcion .opcion-body i {
     color: var(--ColorSecundario);
        
    }
    .container-message{
        border-radius: var(--BorderRadius);
        background-color: var(--ColorDanger);
        padding: var(--Padding);
        margin-bottom: var(--Margin);
        display:none;
        
    }
    .container-message .message {
    }
    .container-message .message p {
        color: var(--ColorPrincipal);
        margin:0;
    }
</style>

<div class="card movil">
    <div class="card-header">
        Ejecutar comando
    </div>
    <div class="card-body">

        <form id="formEjecutarComando">
            <div class="container-form-cv">
                <div class="mb-2">
                    <label class="form-label">Comando</label>
                    <input type="text" class="form-control form-control-sm" name="comando">
                </div>

            </div>

            <div class="container-buttons">
                <button type="submit" class="btn btn-success btn-sm">Ejecutar</button>
            </div>

        </form>

        <div class="container-respuesta">
            <hr>
            <div class="respuesta">

            </div>
            <div class="container-message">
                <div class="message">
                    <p>Esta sección de la página está diseñada para funcionar en Windows. Algunas funcionalidades pueden no estar disponibles en tu sistema operativo.</p>
                </div>
            </div>

            <div class="container-opciones-grid">
                <div class="container-opciones">
                    <div class="opcion">
                        <div class="opcion-head">
                            <p>Abrir correo</p>
                        </div>
                        <div class="opcion-body">
                            <i class="fa fa-envelope fa-10x"></i>
                        </div>
                    </div>
                    <div class="opcion">
                        <div class="opcion-head">
                            <p>Cerrar correo</p>
                        </div>
                        <div class="opcion-body">
                            <i class="fa fa-envelope fa-10x"></i>
                        </div>
                    </div>
                    <div class="opcion">
                        <div class="opcion-head">
                            <p>Abrir google chrome</p>
                        </div>
                        <div class="opcion-body">
                            <i class="fa fa-chrome fa-10x"></i>
                        </div>
                    </div>
                     <div class="opcion">
                        <div class="opcion-head">
                            <p>Cerra google chrome</p>
                        </div>
                        <div class="opcion-body">
                            <i class="fa fa-chrome fa-10x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

<script type="module">

    import { $ } from '/js/utils.js'

    $("#formEjecutarComando").addEventListener('submit', async (e) => {
        e.preventDefault()
        // MOSTRAR LOADER DE CARGA
        $('.container-loading').style = 'display:flex;'
        // OBTENER DATA DEL FORM QUE SE USARA PARA FILTRAR LA INFORMACIÓN
        const dataForm = new FormData(e.target)

        const datosResponse = await fetch('/Cmd/Ejecutar', {
            method: 'POST',
            body: dataForm,
        });

        const datos = await datosResponse.text();

        $('.container-loading').style = 'display:none;'







        $('.container-respuesta .respuesta').innerHTML = `<pre>${recorrerCadena(datos)}</pre>`;

    })

    function recorrerCadena(cadena) {
        var newCadena = ''
        var isNotBlockRecorrido = true
        for (let i = 0; i < cadena.length; i++) {

            let caracterEnter = cadena[i] + cadena[i + 1]


            let saltoDeLinea = caracterEnter.replace(/\\n|\\r/g, function (match) {
                if (match === "\\n") {
                    return "\n";
                } else if (match === "\\r") {
                    return "\r";
                }
            });






            if (isNotBlockRecorrido) {
                if (saltoDeLinea.charCodeAt(0) === 10 || saltoDeLinea.charCodeAt(0) === 13) {

                    newCadena += '<br>'
                    isNotBlockRecorrido = false

                } else {



                    newCadena += cadena[i]


                }
            } else {
                isNotBlockRecorrido = true
            }



        }



        return newCadena
    }

</script>